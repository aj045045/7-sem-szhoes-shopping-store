
from flask import Flask,jsonify,request,session,abort
from flask_sslify import SSLify
from flask_talisman import Talisman
from flask_cors import CORS
from flask_jwt_extended import JWTManager

app = Flask(__name__,template_folder="../templates",static_url_path='/static',static_folder='../static')
jwt = JWTManager(app)

CORS(app)
Talisman(app)
SSLify(app)

@app.before_request
def before_request():
    """
    Before Request Middleware

    This function runs before every request is processed. It checks:
    1. The Content-Type for methods that require 'application/json'.
    2. Validates access control based on user session and path.

    Raises:
        403 (Forbidden): If the request is not allowed due to content type or user permissions.
    """

    # Check for correct content-type for PUT, DELETE, POST methods
    if request.method in ['PUT', 'DELETE', 'POST']:
        if request.headers.get('Content-Type') != 'application/json':
            abort(400, description=f"Content-Type must be 'application/json' for method {request.method} on {request.path}")

    if 'user' in session:
        user_role = session.get('user')

        if user_role == 'customer' and not request.path.startswith('/customer'):
            abort(403, description="You are not authorized to access this resource.")

        elif user_role == 'admin' and not request.path.startswith('/admin'):
            abort(403, description="You are not authorized to access this resource.")

    elif not request.path.startswith(('/auth', '/')):
        abort(403, description="You are not authorized to access this resource.")

@app.after_request
def convertToJson(response):
    """
    After Request Middleware: Response Handler

    This function runs after every request has been processed. It checks if the response is 
    a dictionary and converts it into a JSON response using Flask's `jsonify` function.
    
    Args:
        response (Response): The response object generated by the application.
        
    Returns:
        Response: The response object, potentially modified to be in JSON format if the original 
                response was a dictionary.
    """
    # Ensure response is in JSON format if it's a dictionary
    if isinstance(response.get_json(), dict):
        response.set_data(jsonify(response.get_json()).data)
    return response


@app.errorhandler(Exception)
def errorHandler(error):
    """
    Global Error Handler

    This function handles all exceptions raised within the Flask application. It captures 
    the error message and wraps it in a JSON object for consistent error handling.
    
    Args:
        error (Exception): The exception object raised during request processing.
        
    Returns:
        Response: A JSON response containing the error message and status.
    """
    data = {
        "status": "error",
        "message": str(error)
    }
    return jsonify(data)

@jwt.user_identity_loader
def user_identity_lookup(user):
    return user.id

@jwt.user_lookup_loader
def user_lookup_callback(_jwt_header, jwt_data):
    return session['user']


# REVIEW - Blueprint register
from app.controllers import customer_bp,auth_bp,admin_bp

app.register_blueprint(customer_bp)
app.register_blueprint(auth_bp)
app.register_blueprint(admin_bp)